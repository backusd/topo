#pragma once

// Windows defines a 'DOMAIN' macro, so we undefine it here so we can use it below
#pragma push_macro("DOMAIN")
#undef DOMAIN

namespace topo
{
enum class FILTER
{
    MIN_MAG_MIP_POINT = 0,
    MIN_MAG_POINT_MIP_LINEAR = 0x1,
    MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
    MIN_POINT_MAG_MIP_LINEAR = 0x5,
    MIN_LINEAR_MAG_MIP_POINT = 0x10,
    MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
    MIN_MAG_LINEAR_MIP_POINT = 0x14,
    MIN_MAG_MIP_LINEAR = 0x15,
    ANISOTROPIC = 0x55,
    COMPARISON_MIN_MAG_MIP_POINT = 0x80,
    COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
    COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
    COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
    COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
    COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
    COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
    COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
    COMPARISON_ANISOTROPIC = 0xd5,
    MINIMUM_MIN_MAG_MIP_POINT = 0x100,
    MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
    MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
    MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
    MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
    MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
    MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
    MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
    MINIMUM_ANISOTROPIC = 0x155,
    MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
    MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
    MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
    MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
    MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
    MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
    MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
    MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
    MAXIMUM_ANISOTROPIC = 0x1d5
};

enum class TEXTURE_ADDRESS_MODE
{
    WRAP = 1,
    MIRROR = 2,
    CLAMP = 3,
    BORDER = 4,
    MIRROR_ONCE = 5
};

enum class COMPARISON_FUNC
{
    NEVER = 1,
    LESS = 2,
    EQUAL = 3,
    LESS_EQUAL = 4,
    GREATER = 5,
    NOT_EQUAL = 6,
    GREATER_EQUAL = 7,
    ALWAYS = 8
};

enum class STATIC_BORDER_COLOR
{
    TRANSPARENT_BLACK = 0,
    OPAQUE_BLACK = (TRANSPARENT_BLACK + 1),
    OPAQUE_WHITE = (OPAQUE_BLACK + 1)
};

enum class SHADER_VISIBILITY
{
    ALL = 0,
    VERTEX = 1,
    HULL = 2,
    DOMAIN = 3,
    GEOMETRY = 4,
    PIXEL = 5,
    AMPLIFICATION = 6,
    MESH = 7
};

enum class BLEND
{
    ZERO = 1,
    ONE = 2,
    SRC_COLOR = 3,
    INV_SRC_COLOR = 4,
    SRC_ALPHA = 5,
    INV_SRC_ALPHA = 6,
    DEST_ALPHA = 7,
    INV_DEST_ALPHA = 8,
    DEST_COLOR = 9,
    INV_DEST_COLOR = 10,
    SRC_ALPHA_SAT = 11,
    BLEND_FACTOR = 14,
    INV_BLEND_FACTOR = 15,
    SRC1_COLOR = 16,
    INV_SRC1_COLOR = 17,
    SRC1_ALPHA = 18,
    INV_SRC1_ALPHA = 19,
    ALPHA_FACTOR = 20,
    INV_ALPHA_FACTOR = 21
};
enum class BLEND_OP
{
    ADD = 1,
    SUBTRACT = 2,
    REV_SUBTRACT = 3,
    MIN = 4,
    MAX = 5
};
enum class LOGIC_OP
{
    CLEAR = 0,
    SET = (CLEAR + 1),
    COPY = (SET + 1),
    COPY_INVERTED = (COPY + 1),
    NOOP = (COPY_INVERTED + 1),
    INVERT = (NOOP + 1),
    AND = (INVERT + 1),
    NAND = (AND + 1),
    OR = (NAND + 1),
    NOR = (OR + 1),
    XOR = (NOR + 1),
    EQUIV = (XOR + 1),
    AND_REVERSE = (EQUIV + 1),
    AND_INVERTED = (AND_REVERSE + 1),
    OR_REVERSE = (AND_INVERTED + 1),
    OR_INVERTED = (OR_REVERSE + 1)
};

enum class FILL_MODE
{
    WIREFRAME = 2,
    SOLID = 3
};
enum class CULL_MODE
{
    NONE = 1,
    FRONT = 2,
    BACK = 3
};
enum CONSERVATIVE_RASTERIZATION_MODE
{
    OFF = 0,
    ON = 1
};
enum class DEPTH_WRITE_MASK
{
    ZERO = 0,
    ALL = 1
};

enum class STENCIL_OP
{
    KEEP = 1,
    ZERO = 2,
    REPLACE = 3,
    INCR_SAT = 4,
    DECR_SAT = 5,
    INVERT = 6,
    INCR = 7,
    DECR = 8
};

enum class INDEX_BUFFER_STRIP_CUT_VALUE
{
    VALUE_DISABLED = 0,
    VALUE_0xFFFF = 1,
    VALUE_0xFFFFFFFF = 2
};

enum class FORMAT : unsigned int
{
    UNKNOWN = 0,
    R32G32B32A32_TYPELESS = 1,
    R32G32B32A32_FLOAT = 2,
    R32G32B32A32_UINT = 3,
    R32G32B32A32_SINT = 4,
    R32G32B32_TYPELESS = 5,
    R32G32B32_FLOAT = 6,
    R32G32B32_UINT = 7,
    R32G32B32_SINT = 8,
    R16G16B16A16_TYPELESS = 9,
    R16G16B16A16_FLOAT = 10,
    R16G16B16A16_UNORM = 11,
    R16G16B16A16_UINT = 12,
    R16G16B16A16_SNORM = 13,
    R16G16B16A16_SINT = 14,
    R32G32_TYPELESS = 15,
    R32G32_FLOAT = 16,
    R32G32_UINT = 17,
    R32G32_SINT = 18,
    R32G8X24_TYPELESS = 19,
    D32_FLOAT_S8X24_UINT = 20,
    R32_FLOAT_X8X24_TYPELESS = 21,
    X32_TYPELESS_G8X24_UINT = 22,
    R10G10B10A2_TYPELESS = 23,
    R10G10B10A2_UNORM = 24,
    R10G10B10A2_UINT = 25,
    R11G11B10_FLOAT = 26,
    R8G8B8A8_TYPELESS = 27,
    R8G8B8A8_UNORM = 28,
    R8G8B8A8_UNORM_SRGB = 29,
    R8G8B8A8_UINT = 30,
    R8G8B8A8_SNORM = 31,
    R8G8B8A8_SINT = 32,
    R16G16_TYPELESS = 33,
    R16G16_FLOAT = 34,
    R16G16_UNORM = 35,
    R16G16_UINT = 36,
    R16G16_SNORM = 37,
    R16G16_SINT = 38,
    R32_TYPELESS = 39,
    D32_FLOAT = 40,
    R32_FLOAT = 41,
    R32_UINT = 42,
    R32_SINT = 43,
    R24G8_TYPELESS = 44,
    D24_UNORM_S8_UINT = 45,
    R24_UNORM_X8_TYPELESS = 46,
    X24_TYPELESS_G8_UINT = 47,
    R8G8_TYPELESS = 48,
    R8G8_UNORM = 49,
    R8G8_UINT = 50,
    R8G8_SNORM = 51,
    R8G8_SINT = 52,
    R16_TYPELESS = 53,
    R16_FLOAT = 54,
    D16_UNORM = 55,
    R16_UNORM = 56,
    R16_UINT = 57,
    R16_SNORM = 58,
    R16_SINT = 59,
    R8_TYPELESS = 60,
    R8_UNORM = 61,
    R8_UINT = 62,
    R8_SNORM = 63,
    R8_SINT = 64,
    A8_UNORM = 65,
    R1_UNORM = 66,
    R9G9B9E5_SHAREDEXP = 67,
    R8G8_B8G8_UNORM = 68,
    G8R8_G8B8_UNORM = 69,
    BC1_TYPELESS = 70,
    BC1_UNORM = 71,
    BC1_UNORM_SRGB = 72,
    BC2_TYPELESS = 73,
    BC2_UNORM = 74,
    BC2_UNORM_SRGB = 75,
    BC3_TYPELESS = 76,
    BC3_UNORM = 77,
    BC3_UNORM_SRGB = 78,
    BC4_TYPELESS = 79,
    BC4_UNORM = 80,
    BC4_SNORM = 81,
    BC5_TYPELESS = 82,
    BC5_UNORM = 83,
    BC5_SNORM = 84,
    B5G6R5_UNORM = 85,
    B5G5R5A1_UNORM = 86,
    B8G8R8A8_UNORM = 87,
    B8G8R8X8_UNORM = 88,
    R10G10B10_XR_BIAS_A2_UNORM = 89,
    B8G8R8A8_TYPELESS = 90,
    B8G8R8A8_UNORM_SRGB = 91,
    B8G8R8X8_TYPELESS = 92,
    B8G8R8X8_UNORM_SRGB = 93,
    BC6H_TYPELESS = 94,
    BC6H_UF16 = 95,
    BC6H_SF16 = 96,
    BC7_TYPELESS = 97,
    BC7_UNORM = 98,
    BC7_UNORM_SRGB = 99,
    AYUV = 100,
    Y410 = 101,
    Y416 = 102,
    NV12 = 103,
    P010 = 104,
    P016 = 105,
    FORMAT_420_OPAQUE = 106,
    YUY2 = 107,
    Y210 = 108,
    Y216 = 109,
    NV11 = 110,
    AI44 = 111,
    IA44 = 112,
    P8 = 113,
    A8P8 = 114,
    B4G4R4A4_UNORM = 115,

    P208 = 130,
    V208 = 131,
    V408 = 132,


    SAMPLER_FEEDBACK_MIN_MIP_OPAQUE = 189,
    SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE = 190,


    FORCE_UINT = 0xffffffff
};

enum class PIPELINE_STATE_FLAGS
{
    NONE = 0,
    TOOL_DEBUG = 0x1
};

enum class COLOR_WRITE_ENABLE : char
{
    RED = 1,
    GREEN = 2,
    BLUE = 4,
    ALPHA = 8,
    ALL = (((D3D12_COLOR_WRITE_ENABLE_RED | D3D12_COLOR_WRITE_ENABLE_GREEN) | D3D12_COLOR_WRITE_ENABLE_BLUE) | D3D12_COLOR_WRITE_ENABLE_ALPHA)
};

enum PRIMITIVE_TOPOLOGY_TYPE
{
    UNDEFINED = 0,
    POINT = 1,
    LINE = 2,
    TRIANGLE = 3,
    PATCH = 4
};
enum class PRIMITIVE_TOPOLOGY
{
    UNDEFINED = 0,
    POINTLIST = 1,
    LINELIST = 2,
    LINESTRIP = 3,
    TRIANGLELIST = 4,
    TRIANGLESTRIP = 5,
    LINELIST_ADJ = 10,
    LINESTRIP_ADJ = 11,
    TRIANGLELIST_ADJ = 12,
    TRIANGLESTRIP_ADJ = 13,
    TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
    TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
    TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
    TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
    TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
    TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
    TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
    TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
    TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
    TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
    TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
    TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
    TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
    TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
    TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
    TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
    TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
    TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
    TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
    TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
    TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
    TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
    TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
    TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
    TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
    TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
    TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
    TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
    TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
    TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
    TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
    TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64
};

PRIMITIVE_TOPOLOGY_TYPE DeducePrimitiveTopologyType(PRIMITIVE_TOPOLOGY topology);
}


#pragma pop_macro("DOMAIN")